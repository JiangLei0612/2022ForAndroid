<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/white"
    android:orientation="vertical"
    >

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/teal_200"
        >

        <TextView
            android:id="@+id/tv_back"
            android:layout_width="80dp"
            android:layout_height="45dp"
            android:text="返回"
            android:textSize="18sp"
            android:textColor="@color/white"
            android:gravity="center"
            android:layout_centerVertical="true"
            />

        <TextView
            android:id="@+id/tv_test"
            android:layout_width="80dp"
            android:layout_height="45dp"
            android:text="测试"
            android:textSize="18sp"
            android:textColor="@color/white"
            android:layout_centerVertical="true"
            android:layout_alignParentRight="true"
            android:gravity="center"
            />

    </RelativeLayout>

    <View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:background="@color/white"
        />

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:id="@+id/ll_content"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical"
            >

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:minHeight="40dp"
                android:textStyle="bold"
                android:textSize="20sp"
                android:gravity="center_vertical"
                android:background="@color/teal_200"
                android:textColor="@color/white"
                android:text="Q1 LeakCanary原理？"
                android:paddingLeft="15dp"
                >

            </TextView>

            <TextView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textSize="16sp"
                android:background="@color/white"
                android:paddingLeft="15dp"
                android:paddingRight="15dp"
                android:textColor="@color/black"
                android:textIsSelectable="true"
                android:textStyle="bold"
                android:text="Java中的WeakReference是弱引用类型，每当发生GC时，它所持有的对象如果没有被其他强引用所持有，那么它所引用的对象就会被回收，同时或者稍后的时间这个WeakReference会被入队到ReferenceQueue中，LeakCanary中检测内存泄露就是基于这个原理。
                \n
                \n ObjectWatcher.watch()
                \n 1.当一个对象需要被回收时，生成一个唯一的key，将它们封装进KeyedWeakReference中，并传入自定义的ReferenceQueue；
                \n 2.将key和KeyedWeakReference放入一个map中；
                \n 3.过一会儿之后(默认是5秒)主动触发GC，将自定义的ReferenceQueue中的KeyedWeakReference全部移除(它们所引用的对象已被回收)，并同时根据这些KeyedWeakReference的key将map中的KeyedWeakReference也移除掉；
                \n 4.此时如果map中还有KeyedWeakReference剩余，那么就是没有入队的，也就是说这些KeyedWeakReference所对应的对象还没被回收，这里就产生了内存泄露；
                \n"
                >
            </TextView>



            <ImageView
                android:id="@+id/iv001"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:paddingLeft="15dp"
                android:paddingRight="15dp"
                android:src="@drawable/leak"
                android:adjustViewBounds="true"
                >

            </ImageView>



        </LinearLayout>

    </ScrollView>

</LinearLayout>